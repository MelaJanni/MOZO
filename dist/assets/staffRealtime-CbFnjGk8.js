const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-DjsxqbqK.js","assets/vendor-CC72n-b_.js","assets/bootstrap--QliLv9A.js","assets/index-bv1c-TJK.css"])))=>i.map(i=>d[i]);
import{o as e,r as t,a as o,_ as r,i as n,b as s}from"./index-DjsxqbqK.js";import"./vendor-CC72n-b_.js";import"./bootstrap--QliLv9A.js";let a=null,i=null;const l=async()=>{if(console.log("🔍 DEBUG: ensureInit called, current db:",!!i),i)return console.log("🔍 DEBUG: Database already initialized, returning existing"),{app:a,db:i};try{console.log("🔍 DEBUG: Initializing Firebase app...");const e=await n();if(!e)return console.error("🔍 DEBUG: Failed to initialize Firebase app"),null;if(console.log("🔍 DEBUG: Firebase instance obtained:",!!e.app),a=e.app,i=s(a),console.log("🔍 DEBUG: Database created:",!!i),e.auth){console.log("🔍 DEBUG: Waiting for auth state to stabilize...");const{onAuthStateChanged:t}=await r(async()=>{const{onAuthStateChanged:e}=await import("./index-DjsxqbqK.js").then(e=>e.U);return{onAuthStateChanged:e}},__vite__mapDeps([0,1,2,3]));await new Promise(o=>{const r=t(e.auth,e=>{console.log("🔍 DEBUG: Auth state changed:",e?"authenticated":"not authenticated"),r(),o()})})}return console.log("🔍 DEBUG: Firebase initialized successfully"),{app:a,db:i}}catch(e){return console.error("🔍 DEBUG: Firebase init error",e),null}},c=new Map;async function f(e,r){if(console.log("🔍 DEBUG: startStaffRealtimeForAdmin called with businessId:",e),!e)return void console.log("🔍 DEBUG: No businessId provided, returning early");console.log("🔍 DEBUG: Ensuring Firebase init...");if(!(await l()))return void console.log("🔍 DEBUG: Firebase init failed, returning early");const n=`businesses_staff/${e}`;console.log("🔍 DEBUG: Setting up listener for path:",n);const s=t(i,n),a=o(s,e=>{const t=e.val();console.log("🔍 DEBUG: Admin listener received data for path",n,":",t);try{r&&"function"==typeof r?(console.log("🔍 DEBUG: Calling onChange callback with data:",t),r(t)):console.log("🔍 DEBUG: onChange is not a valid function:",r)}catch(o){console.error("🔍 DEBUG: startStaffRealtimeForAdmin onChange error",o)}},e=>{console.error("🔍 DEBUG: startStaffRealtimeForAdmin listener error for path:",n,"error:",e)});c.set(`admin:${e}`,{ref:s,unsubscribe:a}),console.log("🔍 DEBUG: Admin listener successfully started for businessId:",e,"path:",n)}function u(t){const o=`admin:${t}`,r=c.get(o);if(r){try{e(r.ref)}catch(n){console.warn("stopStaffRealtimeForAdmin off error",n)}c.delete(o),console.log("staffRealtime: admin listener stopped for",t)}}async function d(e,n){if(!e)return void console.warn("staffRealtime: No userId provided");console.log("🔥 staffRealtime: Starting user listener for userId:",e);if(!(await l()))return void console.error("staffRealtime: Failed to initialize Firebase");const s=`users_staff/${e}`;console.log("🔥 staffRealtime: Setting up listener for path:",s);try{const{getAuth:e}=await r(async()=>{const{getAuth:e}=await import("./index-DjsxqbqK.js").then(e=>e.U);return{getAuth:e}},__vite__mapDeps([0,1,2,3])),t=e(a).currentUser;console.log("🔥 staffRealtime: Current user before listener setup:",t?t.uid:"null"),t||console.warn("🔥 staffRealtime: No authenticated user found, this may cause permission errors")}catch(d){console.error("🔥 staffRealtime: Error checking auth state:",d)}const f=t(i,s),u=o(f,e=>{const t=e.val();try{n&&"function"==typeof n&&n(t)}catch(o){console.error("startStaffRealtimeForUser onChange error",o)}},e=>{console.error("🔥 startStaffRealtimeForUser listener error for path:",s,e),console.error("🔥 Error details:",{code:null==e?void 0:e.code,message:null==e?void 0:e.message,details:(null==e?void 0:e.details)||(null==e?void 0:e.toString())})});c.set(`user:${e}`,{ref:f,unsubscribe:u}),console.log("staffRealtime: user listener started for",e)}function g(t){const o=`user:${t}`,r=c.get(o);if(r){try{e(r.ref)}catch(n){console.warn("stopStaffRealtimeForUser off error",n)}c.delete(o),console.log("staffRealtime: user listener stopped for",t)}}export{f as startStaffRealtimeForAdmin,d as startStaffRealtimeForUser,u as stopStaffRealtimeForAdmin,g as stopStaffRealtimeForUser};
